name: CI

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: -D warnings

jobs:
  # Job 1: Check code formatting (REQUIRED)
  format:
    name: Check Formatting
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust nightly
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: nightly-2025-01-09
        components: rustfmt

    - name: Check formatting
      run: cargo fmt --all -- --check

  # Job 2: Run Clippy lints (REQUIRED)
  clippy:
    name: Clippy Lints
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust nightly
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: nightly-2025-01-09
        components: clippy, rust-src

    - name: Add UEFI target
      run: rustup target add x86_64-unknown-uefi --toolchain nightly-2025-01-09

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-clippy-${{ hashFiles('**/Cargo.lock') }}

    - name: Run clippy (UEFI lib)
      run: cargo clippy --lib --target x86_64-unknown-uefi -- -D warnings

    - name: Run clippy (tests with std)
      run: cargo clippy --tests --features std -- -D warnings
      continue-on-error: true

  # Job 3: Build library for all architectures (REQUIRED)
  build-multi-arch:
    name: Build (${{ matrix.target }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        target:
          - x86_64-unknown-uefi
          - aarch64-unknown-uefi
          - i686-unknown-uefi
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust nightly
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: nightly-2025-01-09
        components: rust-src

    - name: Add target
      run: rustup target add ${{ matrix.target }} --toolchain nightly-2025-01-09

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Build library (debug)
      run: cargo +nightly-2025-01-09 build --lib --target ${{ matrix.target }}

    - name: Build library (release)
      run: cargo +nightly-2025-01-09 build --lib --release --target ${{ matrix.target }}

  # Job 4: Verify library compiles (no_std compatible)
  verify-no-std:
    name: Verify no_std Compatibility
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust nightly
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: nightly-2025-01-09
        components: rust-src

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-verify-${{ hashFiles('**/Cargo.lock') }}

    - name: Verify library builds without std
      run: cargo +nightly-2025-01-09 build --lib --target x86_64-unknown-uefi --verbose

    - name: Report status
      run: |
        echo "✅ Library successfully builds in no_std environment"

  # Job 5: Build example UEFI application (OPTIONAL - for demonstration)
  build-uefi-app:
    name: Build UEFI Application Example
    runs-on: ubuntu-latest
    needs: [format, clippy, build-multi-arch]
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust nightly
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: nightly-2025-01-09
        components: rust-src

    - name: Add UEFI target
      run: rustup target add x86_64-unknown-uefi --toolchain nightly-2025-01-09

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-uefi-app-${{ hashFiles('**/Cargo.lock') }}

    - name: Restore cargo config for UEFI (if exists)
      run: |
        if [ -f .cargo/config.toml.uefi ]; then
          mv .cargo/config.toml.uefi .cargo/config.toml
        fi

    - name: Build UEFI application
      run: cargo +nightly-2025-01-09 build --release --verbose
      continue-on-error: true

    - name: Check binary exists
      run: |
        if [ -f target/x86_64-unknown-uefi/release/uefi-app.efi ]; then
          ls -lh target/x86_64-unknown-uefi/release/uefi-app.efi
          echo "✅ UEFI application built successfully"
        else
          echo "⚠️ UEFI application binary not found (may not be configured)"
        fi
      continue-on-error: true

    - name: Upload UEFI binary
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: uefi-app
        path: target/x86_64-unknown-uefi/release/uefi-app.efi

  # Job 6: CI Success gate (ALL REQUIRED JOBS MUST PASS)
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [format, clippy, build-multi-arch, verify-no-std]
    steps:
    - name: Mark CI as successful
      run: echo "✅ All required CI checks passed!"
